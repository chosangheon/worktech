<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	  
	<!-- 회원가입 -->
	<insert id="insertMember">
		insert into member
		values (#{mNo}, #{email}, #{name}, #{pwd}, #{jobGrade}, null, null, null, default
				, #{dNo}, sysdate, default)
	</insert>
	
	<!-- 사원번호 중복 확인 : ajax -->
	<!-- 반환값 : int -->
	<select id="duplicateMNo" resultType="_int">
		select count(*)
		from member
		where m_No=#{mNo}
	</select>
	
	<!-- 로그인 -->
	<select id="memberLogin" resultMap="memberResultSet">
		select *
		from member m join
			department using (d_no)
		where m_no=#{mNo} and m_status='Y'
	</select>
		
	<resultMap type="Member" id="memberResultSet">
		<id column="M_NO" property="mNo"/>
		<result column="EMAIL" property="email"/>
		<result column="NAME" property="name"/>
		<result column="PWD" property="pwd"/>
		<result column="JOB_GRADE" property="jobGrade"/>
		<result column="BIRTHDAY" property="birthDay"/>
		<result column="PHONE" property="phone"/>
		<result column="ADDRESS" property="address"/>
		<result column="M_GRADE" property="mGrade"/>
		<result column="D_NO" property="dNo"/>
		<result column="D_NAME" property="dName"/>
		<result column="M_HIRED" property="hireDate"/>
		<result column="M_STATUS" property="mStatus"/>
	</resultMap>
	
	<!-- 사원 목록 : 관리자 제외 -->
	<select id="selectMemList" resultMap="memberResultSet">
		select m_no, email, name, pwd, job_grade, birthday, phone, address, m_grade,
				d_no, d_name, m_hired, m_status
		from member
		    join department using (d_no)
		where m_status='Y' and m_grade='USER'
		order by m_no desc
	</select>
	
	<!-- 관리자 목록 -->
	<select id="selectAdminList" resultMap="memberResultSet">
		select m_no, email, name, pwd, job_grade, birthday, phone, address, m_grade,
				d_no, d_name, m_hired, m_status
		from member
		    join department using (d_no)
		where m_status='Y' and m_grade='ADMIN'
		order by m_no desc
	</select>
	
	<!-- listCount -->
	<select id="getMemListCount" resultType="_int">
		select count(*)
		from member
		where m_status='Y'
	</select>
	
	
	<!-- 사원 수 -->
	<select id="countMember" resultType="_int">
		select count(*)
		from member
		where m_status='Y' and m_grade='USER'
	</select>
	
	<!-- 사원 검색 : 사원 수 (사원 명 / 부서 명 / 직급 명 ) -->
	<select id="getSearchResultListCount" resultType="_int">
			select count(*)
			from member
			    join department using(d_no)
			where m_status='Y'
	 		<if test="condition == 'name'"> 
		 		and name like '%' || #{value} || '%'
		 	</if>
		 	<if test="condition == 'department'">
		 		and d_name like '%' || #{value} || '%'
		 	</if>
		 	<if test="condition == 'grade'">
		 		and job_grade like '%' || #{value} || '%'
		 	</if>
	</select>
	
	<!-- 사원 검색 : 검색 결과  -->
	<select id="selectSearchResultList" parameterType="hashmap" resultMap="memberResultSet">
		select m_no, email, name, pwd, job_grade, birthday, phone, address, m_grade,
				d_no, d_name, m_hired, m_status
		from member
		    join department using (d_no)
		where m_status='Y'
		 		<choose>
		 			<when test="condition == 'name'">
		 				and name like '%' || #{value} || '%'
		 			</when>
		 			<when test="condition == 'department'">
		 				and d_name like '%' || #{value} || '%'
		 			</when>
		 			<otherwise> <!-- switch에서의 default : 조건X -->
		 				and job_grade like '%' || #{value} || '%'
		 			</otherwise>
		 		</choose>
		 		order by m_no desc
	</select>
	
	<!-- 사원 삭제 -->
	<update id="deleteMember">
		update member
		set m_status='N'
		where m_No=#{mNo}
	</update>


	<!-- 사원 개별 삭제 -->
<!-- 	<update id="deleteSelectMember"> -->
<!-- 		update member -->
<!-- 		set m_status='N' -->
<!-- 		where m_No=#{string} -->
<!-- 	</update> -->


</mapper>
